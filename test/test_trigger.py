from unittest import TestCase
from numpy import array, ndarray
from numpy.testing import assert_array_equal
from trigger import accel_value,trigger_time

class TriggerTimeTest(TestCase):
    def test_estimates_when_function_exceeds(self):
        function = 10
        t = array([1599574034])
        trig_level = 100
        expected = ndarray([])
        actual = trigger_time(function, t, trig_level)
        assert_array_equal(expected, actual)

class TestAccelValue(TestCase):
    def test_it_provides_the_right_value(self):
        """
        [x,y,z,accel_value]

        x,y and z values were randomly generated 
        accel_value = ((x**2 + y**2 + z**2)**0.5)
        """
        testCases = [[1,2,2,3],\
                    [2,4,4,6],\
                    [2,-1,2,3],\
                    [-4,-4,2,6],\
                    [ 4,-2,4,6],\
                    [ 2,2,-1,3],\
                    [-5.444444444,-10.33333333,-4.111111111,12.38228524],\
                    [6.555555556,7.111111111,-5.111111111,10.93922605],\
                    [7.888888889,-5.222222222,11,14.50883086],\
                    [7.111111111,2.222222222,-8.111111111,11.01345978],\
                    [3.333333333,-6.666666667,2.777777778,7.954345035],\
                    [-7.222222222,-8.666666667,-7.333333333,13.45545922],\
                    [2.555555556,8.333333333,-3.444444444,9.372273266],\
                    [-10.88888889,5.555555556,-10.77777778,16.29701177],\
                    [1.777777778,2.888888889,2.111111111,3.995367688],\
                    [-1.333333333,3,-8.333333333,8.956685895],\
                    [-8.111111111,-10.55555556,-9.111111111,16.13140484],\
                    [9,-11,10.66666667,17.77013725],\
                    [9.777777778,-5.555555556,3,11.63912092],\
                    [-8.555555556,5.777777778,-7.555555556,12.79322737],\
                    [1.222222222,1.111111111,-3.777777778,4.123105626],\
                    [1.111111111,-11,9.666666667,14.68601417],\
                    [-8.222222222,3.222222222,4.555555556,9.936837562],\
                    [9.555555556,-9.888888889,7.555555556,15.69028952],\
                    [-10.44444444,-2.666666667,0.222222222,10.7817862],\
                    [-3.666666667,-1.444444444,11.11111111,11.78930254],\
                    [8.222222222,0.888888889,3.333333333,8.916623399],\
                    [1.555555556,-4.333333333,-7.888888889,9.134117295],\
                    [-0.555555556,8.444444444,7.111111111,11.05374078],\
                    [-7.222222222,8,-10.33333333,14.93111756],\
                    [7.222222222,-3.222222222,7.111111111,10.63537076],\
                    [-1.666666667,-2,5.333333333,5.934831272],\
                    [-2.555555556,5.111111111,-4.777777778,7.448589228],\
                    [3.111111111,3.444444444,-9.666666667,10.72322966],\
                    [-9,4.666666667,-5.444444444,11.5073782],\
                    [-0.666666667,8.222222222,10.11111111,13.04928928],\
                    [-8.111111111,-4.222222222,-4.888888889,10.36911368],\
                    [-2.555555556,0.111111111,-9,9.356452847],\
                    [10,-1.222222222,-2.555555556,10.39349274] 
                    ]

        for test in testCases:
            assert_array_equal(round(accel_value(test[0],test[1],test[2]),4), round(test[3],4))